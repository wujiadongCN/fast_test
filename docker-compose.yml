version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: demo-redis
    restart: unless-stopped
    # 只在内部网络暴露，不映射到宿主机
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    networks:
      - app-network

  api:
    build:
      context: .
      target: production
    container_name: demo-api
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
    command: >
      sh -c "echo 'Waiting for Redis...' &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 1"
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./app:/app/app:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - app-network

  worker:
    build:
      context: .
      target: production
    container_name: demo-worker
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - CELERY_WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-2}
    command: >
      sh -c "echo 'Waiting for Redis...' &&
      uv run celery -A app.celery_app.celery worker -l info --concurrency=$${CELERY_WORKER_CONCURRENCY} --max-tasks-per-child=1000"
    volumes:
      - ./app:/app/app:ro
    healthcheck:
      test:
        [
          "CMD",
          "uv",
          "run",
          "celery",
          "-A",
          "app.celery_app.celery",
          "inspect",
          "ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - app-network

  flower:
    build:
      context: .
      target: production
    container_name: demo-flower
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      worker:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://redis:6379/0
    command: >
      uv run celery -A app.celery_app.celery flower --port=5555
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:5555 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    networks:
      - app-network

volumes:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
